# observed
O <- c( 9, 39, 11, 9, 15, 8, 26, 7, 6, 20,13, 5, 3, 8, 17, 9, 2, 7, 9, 7,16, 31, 11, 7, 19, 15, 7, 10, 16, 11,5, 3, 7, 8, 11, 9, 11, 8, 6, 4,10, 8, 2, 6, 19, 3, 2, 3, 28, 6,1, 1, 1, 1, 0, 0)
# expected
E <- c( 1.4, 8.7, 3.0, 2.5, 4.3, 2.4, 8.1, 2.3, 2.0, 6.6,4.4, 1.8, 1.1, 3.3, 7.8, 4.6, 1.1, 4.2, 5.5, 4.4,10.5,22.7, 8.8, 5.6,15.5,12.5, 6.0, 9.0,14.4,10.2,4.8, 2.9, 7.0, 8.5,12.3,10.1,12.7, 9.4, 7.2, 5.3,18.8,15.8, 4.3,14.6,50.7, 8.2, 5.6, 9.3,88.7,19.6,3.4, 3.6, 5.7, 7.0, 4.2, 1.8)
# covariate
x <- c(16,16,10,24,10,24,10, 7, 7,16,7,16,10,24, 7,16,10, 7, 7,10,7,16,10, 7, 1, 1, 7, 7,10,10,7,24,10, 7, 7, 0,10, 1,16, 0,1,16,16, 0, 1, 7, 1, 1, 0, 1,1, 0, 1, 1,16,10)
# adjacency matrix
A <- structure(c(0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0,
0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0,
0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0,
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0,
1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1,
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0,
0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0,
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0,
0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0,
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1,
0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0,
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1,
0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0,
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0,
0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0,
0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0,
0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1,
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0,
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0,
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0,
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0,
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0,
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1,
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0,
0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0,
0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0,
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0,
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1,
1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0,
0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0,
1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0,
0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0,
0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0,
0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0,
0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0,
0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0,
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0,
0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0,
1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0,
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0,
1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0,
0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0,
0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0,
0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0,
1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0,
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0,
1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0,
0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0,
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0,
0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1,
0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0,
0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0,
0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0,
0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0,
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1,
0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0,
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0,
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1,
0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0,
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0,
0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0,
0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0,
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0,
1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1,
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0,
0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0,
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1,
0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0), .Dim = c(N, N))
# Define MCMC parameters
niter <- 1E4   # definitely overkill, but good for comparison
nchains <- 4
W <- A # adjacency matrix
scaled_x <- c(scale(x))
X <- model.matrix(~scaled_x)
full_d <- list(n = nrow(X),         # number of observations
p = ncol(X),         # number of coefficients
X = X,               # design matrix
y = O,               # observed number of cases
log_offset = log(E), # log(expected) num. cases
W = W)               # adjacency matrix
library(MASS)
### simulate the fake data
fake_data_simulator <- function(n_sim = 1,d=full_d) {
fake <- matrix(NA,ncol = length(d$y),nrow = n_sim)
for (i in 1:n_sim){
tau <- rgamma(n = 1, shape = 2,rate = 2)
alpha <- runif(n = 1,min = 0,max = 1)
mu <- rep(0,d$n)
D <- diag(apply(W,1,sum))
Sigma <- tau * (D - alpha* d$W)
phi <- mvrnorm(n=1,mu = mu,Sigma = Sigma)
beta <- rnorm(n = d$p,mean = 0,sd = 1)
lambda <- c()
for (j in 1:d$n){
lambda[j] <- exp(sum(d$X[j,] * beta)  + phi[j] + d$log_offset[j])
}
y <- sapply(lambda,rpois,n=1)
fake[i,] <- y
}
return(fake)
}
## simulate 10000 sake data
simulated <- fake_data_simulator(n_sim = 10000)
simulated
is.na(simulated)
sum(is.na(simulated))
which(is.na(simulated))
library(MASS)
### simulate the fake data
fake_data_simulator <- function(n_sim = 1,d=full_d) {
fake <- matrix(NA,ncol = length(d$y),nrow = n_sim)
for (i in 1:n_sim){
tau <- rgamma(n = 1, shape = 2,rate = 2)
alpha <- runif(n = 1,min = 0,max = 1)
mu <- rep(0,d$n)
D <- diag(apply(W,1,sum))
Sigma <- tau * (D - alpha* d$W)
phi <- mvrnorm(n=1,mu = mu,Sigma = Sigma)
beta <- rnorm(n = d$p,mean = 0,sd = 1)
lambda <- c()
for (j in 1:d$n){
lambda[j] <- exp(sum(d$X[j,] * beta)  + phi[j] + d$log_offset[j])
}
y <- sapply(lambda,rpois,n=1)
fake[i,] <- y
}
return(fake)
}
## simulate 10000 sake data
simulated <- fake_data_simulator(n_sim = 1000)
y
library(bayesplot)
simulated
dim(simulated)
library(bayesplot)
mcmc_recover_hist(simulated, true = y)
## check for the mean
true_mean <- mean(y)
posterior_mean <- apply(simulated,1,mean)
posterior_mean
hist(posterior_mean)
hist(posterior_mean,breaks = 100)
hist(posterior_mean,breaks = 10000)
hist(posterior_mean,breaks = 10000,xlim = c(0,1))
hist(posterior_mean,breaks = 10000,xlim = c(0,10))
hist(posterior_mean,xlim = c(0,10))
hist(posterior_mean)
posterior_mean
true_mean
hist(posterior_mean,xlim = c(0,100))
hist(posterior_mean,breaks=10,xlim = c(0,100))
hist(posterior_mean,breaks=10,xlim = c(0,1000))
hist(posterior_mean)
hist(posterior_mean,xlim = c(0,10000))
summary(posterior_mean)
library(MASS)
### simulate the fake data
fake_data_simulator <- function(n_sim = 1,d=full_d) {
fake <- matrix(NA,ncol = length(d$y),nrow = n_sim)
for (i in 1:n_sim){
tau <- rgamma(n = 1, shape = 2,rate = 2)
alpha <- runif(n = 1,min = 0,max = 1)
mu <- rep(0,d$n)
D <- diag(apply(W,1,sum))
Sigma <- tau * (D - alpha* d$W)
phi <- mvrnorm(n=1,mu = mu,Sigma = Sigma)
beta <- rnorm(n = d$p,mean = 0,sd = 1)
lambda <- c()
for (j in 1:d$n){
lambda[j] <- exp(sum(d$X[j,] * beta)  + phi[j] + d$log_offset[j])
}
y <- sapply(lambda,rpois,n=1)
fake[i,] <- y
}
return(fake)
}
## simulate 10000 sake data
simulated <- fake_data_simulator(n_sim = 100)
library(bayesplot)
## check for the mean
true_mean <- mean(y)
posterior_mean <- apply(simulated,1,mean)
hist(posterior_mean,xlim = c(0,10000))
library(bayesplot)
## check for the mean
true_mean <- mean(y)
posterior_mean <- apply(simulated,1,mean)
hist(posterior_mean,xlim = c(0,100))
simulated
library(MASS)
### simulate the fake data
fake_data_simulator <- function(n_sim = 1,d=full_d) {
fake <- matrix(NA,ncol = length(d$y),nrow = n_sim)
for (i in 1:n_sim){
tau <- rgamma(n = 1, shape = 2,rate = 2)
alpha <- runif(n = 1,min = 0,max = 1)
mu <- rep(0,d$n)
D <- diag(apply(W,1,sum))
Sigma <- tau * (D - alpha* d$W)
phi <- mvrnorm(n=1,mu = mu,Sigma = Sigma)
beta <- rnorm(n = d$p,mean = 0,sd = 1)
lambda <- c()
for (j in 1:d$n){
lambda[j] <- exp(sum(d$X[j,] * beta)  + phi[j] + d$log_offset[j])
}
y <- sapply(lambda,rpois,n=1)
fake[i,] <- y
}
return(fake)
}
## simulate 10000 sake data
simulated <- fake_data_simulator(n_sim = 1)
simulated
mean(simulated)
true_mean
## simulate 10000 sake data
simulated <- fake_data_simulator(n_sim = 1)
mean(simulated)
library(MASS)
### simulate the fake data
fake_data_simulator <- function(n_sim = 1,d=full_d) {
fake <- matrix(NA,ncol = length(d$y),nrow = n_sim)
for (i in 1:n_sim){
tau <- rgamma(n = 1, shape = 2,rate = 2)
alpha <- runif(n = 1,min = 0,max = 1)
mu <- rep(0,d$n)
D <- diag(apply(W,1,sum))
Sigma <- tau * (D - alpha* d$W)
phi <- mvrnorm(n=1,mu = mu,Sigma = Sigma)
beta <- rnorm(n = d$p,mean = 0,sd = 1)
lambda <- c()
for (j in 1:d$n){
lambda[j] <- exp(sum(d$X[j,] * beta)  + phi[j] + d$log_offset[j])
}
y <- sapply(lambda,rpois,n=1)
fake[i,] <- y
}
return(fake)
}
## simulate 10000 sake data
simulated <- fake_data_simulator(n_sim = 1000)
library(bayesplot)
## check for the mean
true_mean <- mean(y)
posterior_mean <- apply(simulated,1,mean)
posterior_mean
hist(posterior_mean)
hist(posterior_mean,xlim=c(0,5000))
hist(posterior_mean,breaks=10,xlim=c(0,5000))
hist(posterior_mean,breaks=10,xlim=c(0,7000))
hist(posterior_mean)
library(ggplot2)
ata.frame(posterior_mean)
data.frame(posterior_mean)
ggplot(data.frame('posterior mean' = posterior_mean),aes(x=posterior_mean))+
geom_histogram(aes(y=..density..), colour="black", fill="white")
geom_vline(aes(xintercept=true_mean,color="blue", linetype="dashed", size=1)
geom_vline(aes(xintercept=true_mean,color="blue", linetype="dashed", size=1)
ggplot(data.frame('posterior mean' = posterior_mean),aes(x=posterior_mean))+
geom_histogram(aes(y=..density..), colour="black", fill="white") +
geom_vline(aes(xintercept=true_mean),color="blue", linetype="dashed", size=1)
ggplot(data.frame('posterior mean' = posterior_mean),aes(x=posterior_mean))+
geom_histogram(aes(y=..density..)) +
geom_vline(aes(xintercept=true_mean),color="blue", linetype="dashed")
ggplot(data.frame('posterior mean' = posterior_mean),aes(x=posterior_mean))+
geom_histogram(aes(y=..density..)) +
geom_vline(aes(xintercept=true_mean))
## check for the standard deviation
true_sd <- sd(y)
posterior_sd <- apply(simulated,1,sd)
ggplot(data.frame('posterior sd' = posterior_sd),aes(x=posterior_sd))+
geom_histogram(aes(y=..density..)) +
geom_vline(aes(xintercept=true_sd))
library(bayesplot)
library(ggplot2)
## check for the mean
true_mean <- mean(y)
posterior_mean <- apply(simulated,1,mean)
ggplot(data.frame('posterior mean' = posterior_mean),aes(x=posterior_mean))+
geom_histogram(aes(y=..density..)) +
geom_vline(aes(xintercept=true_mean))
## check for the standard deviation
true_sd <- sd(y)
posterior_sd <- apply(simulated,1,sd)
ggplot(data.frame('posterior sd' = posterior_sd),aes(x=posterior_sd))+
geom_histogram(aes(y=..density..)) +
geom_vline(aes(xintercept=true_sd))
knitr::opts_chunk$set(echo = TRUE)
ppc_stat(y = full_real$y, yrep = y_rep, stat = function(x){mean(x==0)})
knitr::opts_chunk$set(echo = TRUE)
data <- read.table('core.txt', header = TRUE, sep = "|", dec = "\n")
data <- read.table('core.txt', header = TRUE)
data <- read.table('core.txt', header = TRUE,sep = '|')
data <- read.delim2('core.txt', header = TRUE,sep = '|',quote = "\n")
View(data)
## the first 4 lines seems to be wrong, delete it
data <-
class(data)
## the first 4 lines seems to be wrong, delete it
data <-
class(data)
class(data)
## the first 4 lines seems to be wrong, delete it
data[1,]
## the first 4 lines seems to be wrong, delete it
data
data <- read.delim2('core.txt', header = TRUE,sep = '|',quote = "\n")
## the first 4 lines seems to be wrong, delete it
data[1,]
## the first 4 lines seems to be wrong, delete it
data
## the first 4 lines seems to be wrong, delete it
data <- data[5:,]
## the first 4 lines seems to be wrong, delete it
data <- data[5:nrow(data),]
data
View(data)
table(data$y)
summary(data)
View(data)
data <- read.delim2('core.txt', header = TRUE,sep = '|',quote = "\n")
## the first 4 lines seems to be wrong, delete it
data <- data[5:nrow(data),]
colnames(data)
X <- model.matrix(y ~ city + state + sex + age + asset_value + contract_length,data=data)
View(X)
X <- model.matrix(y ~ city + sex + age + asset_value + contract_length,data=data)
table(data$credit_score)
table(data$risk_index)
library(rstan)
library(rstan)
options(mc.cores = parallel::detectCores())
rstan_options(auto_write = TRUE)
model <- stan_model('yi.stan')
model <- stan_model('yi.stan')
library(rstan)
options(mc.cores = parallel::detectCores())
rstan_options(auto_write = TRUE)
model <- stan_model('yi.stan')
model <- stan_model('yi.stan')
lookup(')
)
''
'
lookup("'")
model <- stan_model('yi.stan')
model <- stan_model('yi.stan')
model <- stan_model('yi.stan')
model <- stan_model('yi.stan')
model <- stan_model('yi.stan')
model <- stan_model('yi.stan')
model <- stan_model('yi.stan')
model <- stan_model('yi.stan')
model <- stan_model('yi.stan')
model <- stan_model('yi.stan')
model <- stan_model('yi.stan')
model <- stan_model('yi.stan')
model <- stan_model('yi.stan')
setwd("~/BDA_project/yichen")
setwd("~/BDA_project/yichen")
model <- stan_model('probity.stan')
data$y
?sample
data <- read.delim2('core.txt', header = TRUE,sep = '|',quote = "\n")
## the first 4 lines seems to be wrong, delete it
data <- data[5:nrow(data),]
rand_y <- sample(c(0,1,2),size = length(data$y),prob = c(0.7,0.2,0.1))
data <- read.delim2('core.txt', header = TRUE,sep = '|',quote = "\n")
## the first 4 lines seems to be wrong, delete it
data <- data[5:nrow(data),]
rand_y <- sample(c(0,1,2),size = length(data$y),prob = c(0.7,0.2,0.1),replace = T)
data$y <- rand_y
data$y
data$sex
table(data$sex)
model.matrix(~y ,data=data)
model.matrix(~ sex ,data=data)
dim(model.matrix(~ sex ,data=data))
dim(model.matrix(~ sex + city ,data=data))
colnames(data)
dim(model.matrix(~ sex + state ,data=data))
model.matrix(~ sex + state + age+ asset_market_value ,data=data)
X <- model.matrix(~ sex + state + age+ asset_market_value ,data=data)
dim(X)
X <- model.matrix(y~ sex + state + age+ asset_market_value ,data=data)
dim(X)
X
X <- model.matrix( ~ sex + state ,data=data)
X
class(X)
original_name <- colnames(X)
View(data)
X <- cbind(X,data$age,data$asset_value,data$months_employed)
colnames(X) <- c(original_name, 'age','asset value','month employed')
dim(X)
data.matrix(~y)
data.matrix(~y,data)
data.matrix(~ y , data=data)
model.matrix(y, data=data)
model.matrix(y, data)
model.matrix(y, data)
model.matrix(~y, data)
N <- dim(data)[1]
N
N <- dim(data)[1]
D <- 3
y <- matrix(NA,ncol =N,nrow =D)
for (i in 1:N){
if (data$y[i] == 0){
y[i] <- c(0,0,0)
}else(data$y[i] == 1){
D <- 3
y <- matrix(NA,ncol =N,nrow =D)
for (i in 1:N){
if (data$y[i] == 0){y[i] <- c(0,0,0)}
else(data$y[i] == 1){y[i] <- c(0,1,0)}
D <- 3
y <- matrix(NA,ncol =N,nrow =D)
for (i in 1:N){
if (data$y[i] == 0){y[i] <- c(0,0,0)}
else if(data$y[i] == 1){y[i] <- c(0,1,0)}
else{y[i] <- c(0,0,1)}
}
