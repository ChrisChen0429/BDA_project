# ===========================================================================
# Notes
# ===========================================================================
"""
(*) This script performs k-means on the data to understand some of the
    structure in the data
"""
# ===========================================================================
# %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
# ===========================================================================
# Import packages
# ===========================================================================
import os
# import numpy as np
import pandas as pd
from AndPotap.Utils.cluster import k_means_addition
import multiprocessing
from functools import partial
# ===========================================================================
# %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
# ===========================================================================
# Determine files
# ===========================================================================
# Set working directory
os.chdir('/Users/andpotap/Documents/Columbia/BS/BDA_project')

# Select files for input and output
# Input
# file_input = './AndPotap/DBs/core_sample.txt'
file_input = './AndPotap/DBs/core.txt'

# Output
file_output = './AndPotap/DBs/core_clusters.txt'
# ===========================================================================
# %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
# ===========================================================================
# Load files
# ===========================================================================
df = pd.read_csv(filepath_or_buffer=file_input, sep='|')
# ===========================================================================
# %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
# ===========================================================================
# Select relevant columns
# ===========================================================================
selected_columns = [
    'age',
    'appraisal_value',
    'client_income',
    'risk_index',
    'ratio',
    'lender_score',
    'asset_market_value',
    'credit_score',
    'factor_employed',
    'effective_pay'
]
# x = df[selected_columns].values
# ===========================================================================
# %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
# ===========================================================================
# Perform clustering
# ===========================================================================
# k = 5
# df_aux = k_means_addition(k=k,
#                           df=df,
#                           selected_columns=selected_columns,
#                           seed=24524)
# ===========================================================================
# %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
# ===========================================================================
# Perform Multiprocess clustering
# ===========================================================================
pool = multiprocessing.Pool()
iterable = [3, 5, 7, 10, 12, 20]
f = partial(k_means_addition,
            df=df,
            selected_columns=selected_columns,
            seed=12342)

zz = pool.map(func=f, iterable=iterable)
# ===========================================================================
# %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
# ===========================================================================
# Merge back
# ===========================================================================
T = len(zz)
for j in range(T):
    df = pd.merge(left=df, right=zz[j][0], how='inner', on='mortgage_id')
# ===========================================================================
# %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
# ===========================================================================
# Write output
# ===========================================================================
df.to_csv(path_or_buf=file_output, sep='|', index=False)
# ===========================================================================

